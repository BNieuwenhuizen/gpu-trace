#!/bin/bash

set -e
set -o pipefail
set -o nounset

# parameter defaults
UNINIT="UNINITMAGIC"
VERBOSE=0
PID="${UNINIT}"
PID_POLL_PRECISION="0.01"

function pVerbose () {
    if [ "${VERBOSE}" == "1" ]; then
        echo $@
    fi
}

function pErr () {
    echo -e $@
}

function die () {
    if [ $# -ne 0 ]; then
        pErr $@
    fi
    exit 1
}

function printUsage() {
    pErr "Usage: $(basename $0) [options]"
    pErr
    pErr "Options:"
    pErr "    -p, --pid <pid>       Trace for the lifetime of <pid>"
    pErr "    -v, --verbose         Verbose Output"
    pErr "    -h, --help            Print this help menu and exit"
}

function waitForProcess () {
    local pid="$1"
    local pidFile="/proc/$pid"

    if [ ! -e ${pidFile} ]; then
        pErr "Could not find process: $pid. Did it already exit?"
        return
    fi

    pVerbose "Waiting for process: $pid"

    # Can't do event based wait for PID unless it is a child PID
    # We are most likely interested in an external PID
    while [ -e /proc/$pid ]; do
        sleep ${PID_POLL_PRECISION};
    done

    pVerbose "Finished waiting for process: $pid"
}

while [[ $# -gt 0 ]]; do
    case "$1" in
        -v|--verbose) VERBOSE=1; shift ;;
        -p|--pid) PID=$2; shift 2 ;;
        -h|--help) printUsage; exit ;;
        *) echo "Unknown option $1"; printUsage; die;;
    esac
done

waitForProcess $PID
